{"version":3,"sources":["components/atoms.js","components/activeGame.js","components/waitingGame.js","components/winningGame.js","components/gameControls.js","App.js","serviceWorker.js","index.js"],"names":["gameState","atom","key","default","GameID","active","currentSteps","multiplier","startedAt","winningSteps","confetti","playerState","voteSubmitted","vote","voteRound","confettiState","endTimerState","ActiveGame","useRecoilState","game","player","setPlayer","endTimer","setEndTimer","addSteps","steps","vtype","a","console","log","fetch","method","body","JSON","stringify","then","response","round","useEffect","countdown","Math","roundEndsAt","Date","now","className","controls","ButtonToolbar","ButtonGroup","IconButton","onClick","color","icon","Icon","rotate","dsp","WaitingGame","WinningGame","setConfetti","GameControls","targetModifier","App","setGame","getGameState","mode","cache","headers","json","setTimeout","confettidsp","Container","Grid","Row","Col","xs","md","Panel","header","bordered","shaded","bodyFill","style","position","paddingBottom","paddingTop","height","top","left","width","src","frameBorder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23b28fcb.chunk.js","sourcesContent":["import {atom} from 'recoil';\r\n\r\nexport const gameState = atom ({\r\n    key:'gameState',\r\n    default:\r\n      {\r\n        GameID: \"8d60e1c0-c91e-11ea-8dc7-d7d22775db3d\",\r\n        active: false,\r\n        currentSteps: 0,\r\n        multiplier: 2,\r\n        startedAt: 1595792079475,\r\n        winningSteps: 87,\r\n        confetti: false\r\n      }\r\n  });\r\n  \r\n  export const playerState = atom ({\r\n    key:'playerState',\r\n    default:\r\n      {\r\n        voteSubmitted:false,\r\n        vote:false,\r\n        voteRound:-1\r\n  \r\n      }\r\n  });\r\n\r\n  export const confettiState = atom ({\r\n    key:'confettiState',\r\n    default: false\r\n   \r\n  });\r\n\r\n  export const endTimerState = atom ({\r\n    key:'endTimerState',\r\n    default: 0\r\n   \r\n  });","import React, {useEffect} from 'react'\r\nimport { useRecoilState} from 'recoil';\r\nimport { gameState, playerState, endTimerState} from './atoms';\r\nimport { IconButton,  Icon, ButtonToolbar, ButtonGroup} from 'rsuite';\r\n\r\nexport default function ActiveGame() {\r\n\r\n    const [game, setGame] = useRecoilState(gameState);\r\n    const [player, setPlayer] = useRecoilState(playerState);\r\n    const [endTimer, setEndTimer] = useRecoilState(endTimerState);\r\n\r\n    async function addSteps(steps, vtype) {\r\n        console.log(\"GAME IS!!!! \", game);\r\n       \r\n        fetch('https://kufigwfj8g.execute-api.us-east-2.amazonaws.com/dev/game/step', {\r\n            method: 'post',\r\n            body: JSON.stringify({steps:steps})\r\n          }).then(function(response) {\r\n            setPlayer({\r\n                voteSubmitted:true,\r\n                vote:vtype,\r\n                voteRound:game.round\r\n                \r\n            });\r\n          });\r\n\r\n        }\r\n\r\n        function updateTimer() {\r\n            console.log(\"ROUND ENDS\", game);\r\n            let et = (game.roundEndsAt - Date.now());\r\n            if (et < 0) {\r\n                et = 0;\r\n            }\r\n            console.log(\"ET\", et);\r\n            setEndTimer(et);\r\n            console.log(\"END TIMER\", endTimer);\r\n            setTimeout(() => {\r\n                updateTimer();\r\n            }, 100);\r\n    \r\n            \r\n        }\r\n\r\n\r\n\r\n        useEffect(()=>{\r\n           \r\n          // updateTimer();\r\n          let countdown = Math.round((game.roundEndsAt - Date.now())/1000);\r\n          if (countdown < 1) {\r\n              countdown = <div className=\"sublabel\">Next round starting...</div>;\r\n          }\r\n          setEndTimer(countdown);\r\n          \r\n          }, [game]);\r\n\r\n\r\n\r\n\r\n   \r\n\r\n        let controls =  <ButtonToolbar>\r\n        <ButtonGroup>\r\n        <IconButton onClick={()=>addSteps(-2, \"Large Step Backward\")} color=\"green\" icon={<Icon icon=\"fast-backward\" ></Icon>} ></IconButton>\r\n        <IconButton  onClick={()=>addSteps(-1, \"Small Step Backward\")}   color=\"yellow\"  icon={<Icon rotate={180} icon=\"play\" ></Icon>} ></IconButton>\r\n        <IconButton  onClick={()=>addSteps(0, \"Stand Still\")}    icon={<Icon icon=\"stop\" ></Icon>} ></IconButton>\r\n        <IconButton   onClick={()=>addSteps(1,  \"Small Step Forward\")}   color=\"yellow\"  icon={<Icon icon=\"play\" ></Icon>} ></IconButton>\r\n        <IconButton   onClick={()=>addSteps(2,  \"Large Step Forward\")}   color=\"green\"  icon={<Icon icon=\"fast-forward\" ></Icon>} ></IconButton>\r\n        </ButtonGroup>\r\n    </ButtonToolbar>;\r\n\r\n\r\n        let voted = <div> Vote Submitted! </div>;\r\n\r\n        let dsp = <div></div>;\r\n\r\n        if (player.voteRound >= game.round) {\r\n            dsp = <div>Vote Submitted! You voted for {player.vote}</div>\r\n        } else {\r\n            dsp = controls;\r\n        }\r\n\r\n\r\n        \r\n\r\n        console.log(\"END TIMER\", endTimer);\r\n\r\n    return (\r\n        <div>\r\n        <div className='round'>\r\n            ROUND {game.round}\r\n        </div><div className='countdown'>\r\n    \r\n            {endTimer}\r\n\r\n            </div>\r\n    \r\n       \r\n            <div className='controls'>\r\n            <br />\r\n                {dsp}\r\n            </div>\r\n            <br />\r\n            <div className='instructions'>\r\n            <b>Instructions:</b><br/>\r\n            Once the game begins, a countdown timer will begin. You will have 10 seconds to decide how you would like to move the mountaineer.\r\n            You may move in large or small steps, forwards or backwards, or vote to stand still. After the round ends, all players movements will be \r\n            averaged together and the mountaineer will climb!  Make it to the top without going over to win!\r\n            \r\n     </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useRecoilState} from 'recoil';\r\nimport { gameState, playerState} from './atoms';\r\nexport default function WaitingGame() {\r\n\r\n    const [game, setGame] = useRecoilState(gameState);\r\n    const [player, setPlayer] = useRecoilState(playerState);\r\n    \r\n    return (\r\n        <div>\r\n            <div className='instructions'>\r\n                Welcome to Mountaineer Climber!<br />\r\n                The game has not started yet, so kick back relax and get ready for some good ol' fashioned mountaineer fun!\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport { useRecoilState} from 'recoil';\r\nimport { gameState, playerState, confettiState} from './atoms';\r\nimport useWindowSize from 'react-use/lib/useWindowSize'\r\nimport Confetti from 'react-confetti'\r\n\r\nexport default function WinningGame() {\r\n\r\n    const [game, setGame] = useRecoilState(gameState);\r\n    const [player, setPlayer] = useRecoilState(playerState);\r\n    const [confetti, setConfetti] = useRecoilState(confettiState);\r\n    \r\n  useEffect(()=>{\r\n\r\n    setConfetti(true);\r\n  \r\n  }, []);\r\n\r\n  \r\n\r\n    return (\r\n        <div>\r\n        \r\n            Congratulations!  a winner is you!\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useRecoilState} from 'recoil';\r\nimport { gameState, playerState} from './atoms';\r\n\r\nimport ActiveGame from './activeGame';\r\nimport WaitingGame from './waitingGame';\r\nimport WinningGame from './winningGame';\r\n\r\nexport default function GameControls() {\r\n\r\n    const [game, setGame] = useRecoilState(gameState);\r\n    const [player, setPlayer] = useRecoilState(playerState);\r\n    const targetModifier = game.multiplier;\r\n\r\n    \r\n\r\n\r\n    let dsp = <div></div>;\r\n    if (game.round != 0) {\r\n        if ((game.currentSteps < (game.winningSteps + targetModifier)) && (game.currentSteps > (game.winningSteps - targetModifier)) ) {\r\n            dsp =  <WinningGame />;\r\n        } else {\r\n            dsp =  <ActiveGame />;\r\n        }\r\n     \r\n    } else {\r\n        dsp =  <WaitingGame />;\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n     { dsp }\r\n     </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Grid, IconButton, Container, Icon, Row, Col, Button, Panel, ButtonToolbar, ButtonGroup} from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css'; \nimport {useRecoilState} from 'recoil';\nimport {gameState, playerState, confettiState} from './components/atoms';\nimport GameControls from './components/gameControls';\nimport Confetti from 'react-confetti'\n\n\nfunction App() {\n\n  const [game, setGame] = useRecoilState(gameState);\n  const [player, setPlayer] = useRecoilState(playerState);\n  const [confetti, setConfetti] = useRecoilState(confettiState);\n  const getGameState =  async () => {\n    const options = {\n      mode: \"no-cors\"\n    \n    };\n    const response = await fetch('https://kufigwfj8g.execute-api.us-east-2.amazonaws.com/dev/game/gameState',  {\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n     \n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      \n      \n    });\n    const body = await response.json();\n   \n    setGame(body);\n\n    if (body.round == 0) {\n      setConfetti(false);\n      setPlayer(\n        {\n          voteSubmitted:false,\n          vote:false,\n          voteRound:-1\n          \n      }\n      )\n    }\n\n\n    setTimeout(() => {\n      getGameState();\n    }, 900);\n\n  };\n\n  useEffect(()=>{\n\n    getGameState();\n  \n  }, []);\n\n\n\n\n\nlet confettidsp = <div></div>;\nif (confetti) {\n  confettidsp = <Confetti />\n}\n\n\n  return (\n    <div className=\"App\"><br/>\n    <div className=\"title\" ></div>\n    {confettidsp}\n    <Container>\n    <Grid >\n      <Row >\n      <Col xs={24} md={12}><br/>\n      <Panel header={<b>LIVE GAME STREAM</b>} bordered shaded bodyFill>\n      <div\n      className=\"video\"\n      style={{\n        position: \"relative\",\n        paddingBottom: \"56.25%\" /* 16:9 */,\n        paddingTop: 25,\n        height: 0\n      }}\n    >\n      <iframe\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\"\n        }}\n        src={`https://www.youtube.com/embed/iVCmLBTF-To`}\n        frameBorder=\"0\"\n      />\n  \n    </div>\n    </Panel>\n      </Col>\n      <Col xs={24} md={12}>\n<br />\n      <Panel header={<b>GAME CONTROLS</b>} bordered shaded bodyFill>\n     \n       <GameControls />\n     \n    </Panel>\n  \n      </Col>\n    </Row>\n \n    </Grid>\n    </Container>\n    </div>\n    \n  );\n      }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n  <RecoilRoot>\n    <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}